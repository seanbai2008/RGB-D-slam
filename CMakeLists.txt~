cmake_minimum_required(VERSION 2.8.3)
project(RGB-D)

SET( CMAKE_CXX_COMPILER "g++")

SET( CMAKE_BUILD_TYPE Release  )

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  pcl_ros
  cv_bridge
  image_transport
)



LIST( APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake_modules )
SET( G2O_ROOT /opt/ros/indigo/include/g2o )
FIND_PACKAGE( G2O )
# CSparse
FIND_PACKAGE( CSparse )

INCLUDE_DIRECTORIES( ${G2O_INCLUDE_DIRS} ${CSPARSE_INCLUDE_DIRS} /usr/include/suitesparse)


# FIND_PACKAGE( PCL REQUIRED COMPONENTS common io )

find_package(PCL REQUIRED)

find_package(OpenCV 2.4.8 REQUIRED )

find_package(Eigen3 REQUIRED)

INCLUDE_DIRECTORIES( ${PROJECT_SOURCE_DIR}/include)

include_directories(${PCL_INCLUDE_DIRS})

include_directories(${OpenCV_INCLUDE_DIRS})

include_directories(${EIGEN3_INCLUDE_DIR})

link_directories(${PCL_LIBRARY_DIRS})

SET( EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

SET( LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

LINK_DIRECTORIES( ${PROJECT_SOURCE_DIR}/lib)

INCLUDE_DIRECTORIES( ${PROJECT_SOURCE_DIR}/include)

ADD_EXECUTABLE( detectFeatures ${PROJECT_SOURCE_DIR}/src/detectFeatures.cpp )
ADD_EXECUTABLE( generatePointCloud ${PROJECT_SOURCE_DIR}/src/generatePointCloud.cpp )
ADD_EXECUTABLE( joinPointCloud ${PROJECT_SOURCE_DIR}/src/joinPointCloud.cpp )
ADD_EXECUTABLE( test_ground ${PROJECT_SOURCE_DIR}/src/test_ground.cpp )
#ADD_EXECUTABLE( visualOdometry ${PROJECT_SOURCE_DIR}/src/visualOdometry.cpp )
#ADD_EXECUTABLE( slamEnd ${PROJECT_SOURCE_DIR}/src/slamEnd.cpp )


ADD_LIBRARY( slamBase ${PROJECT_SOURCE_DIR}/src/slamBase.cpp )
target_link_libraries( slamBase ${OpenCV_LIBS}  ${PCL_LIBRARIES} ${catkin_LIBRARIES}  -lopencv_nonfree g2o_core g2o_types_slam3d g2o_solver_csparse g2o_stuff g2o_csparse_extension ${CSPARSE_LIBRARY})

target_link_libraries( detectFeatures ${OpenCV_LIBS}  ${PCL_LIBRARIES} -lopencv_nonfree slamBase)
target_link_libraries( generatePointCloud ${OpenCV_LIBS}  ${PCL_LIBRARIES} -lboost_system)
target_link_libraries( joinPointCloud ${OpenCV_LIBS}  ${PCL_LIBRARIES} -lopencv_nonfree slamBase)

#target_link_libraries( visualOdometry ${OpenCV_LIBS}  ${PCL_LIBRARIES} -lopencv_nonfree slamBase)

target_link_libraries( test_ground ${catkin_LIBRARIES} ${PCL_LIBRARIES} slamBase g2o_core g2o_types_slam3d g2o_solver_csparse g2o_stuff g2o_csparse_extension ${CSPARSE_LIBRARY})

#target_link_libraries( slamEnd ${OpenCV_LIBS}  ${PCL_LIBRARIES} slamBase g2o_core g2o_types_slam3d g2o_solver_csparse g2o_stuff g2o_csparse_extension ${CSPARSE_LIBRARY})
